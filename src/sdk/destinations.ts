/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { destinationsCreateDestination } from "../funcs/destinationsCreateDestination.js";
import { destinationsDeleteDestinationDestinationsDestinationIdDelete } from "../funcs/destinationsDeleteDestinationDestinationsDestinationIdDelete.js";
import { destinationsGetDestinationByIdDestinationsDestinationIdGet } from "../funcs/destinationsGetDestinationByIdDestinationsDestinationIdGet.js";
import { destinationsGetDestinations } from "../funcs/destinationsGetDestinations.js";
import { destinationsUpdateDestinationDestinationsDestinationIdPut } from "../funcs/destinationsUpdateDestinationDestinationsDestinationIdPut.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Destinations extends ClientSDK {
  /**
   * Get Destinations
   *
   * @remarks
   * Retrieve a list of all holiday destinations in the database, optionally filtered by minimum rating.
   */
  async getDestinations(
    request: operations.GetDestinationsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Destination>> {
    return unwrapAsync(destinationsGetDestinations(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Destination
   *
   * @remarks
   * Add a new holiday destination to the database.
   */
  async createDestination(
    request: components.Destination,
    options?: RequestOptions,
  ): Promise<components.Destination> {
    return unwrapAsync(destinationsCreateDestination(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Destination
   *
   * @remarks
   * Remove a holiday destination from the database by its ID.
   */
  async deleteDestinationDestinationsDestinationIdDelete(
    request: operations.DeleteDestinationDestinationsDestinationIdDeleteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(
      destinationsDeleteDestinationDestinationsDestinationIdDelete(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get Destination By Id
   *
   * @remarks
   * Retrieve details of a specific holiday destination by its ID.
   */
  async getDestinationByIdDestinationsDestinationIdGet(
    request: operations.GetDestinationByIdDestinationsDestinationIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.Destination> {
    return unwrapAsync(
      destinationsGetDestinationByIdDestinationsDestinationIdGet(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Update Destination
   *
   * @remarks
   * Update details of a specific holiday destination by its ID.
   */
  async updateDestinationDestinationsDestinationIdPut(
    request: operations.UpdateDestinationDestinationsDestinationIdPutRequest,
    options?: RequestOptions,
  ): Promise<components.Destination> {
    return unwrapAsync(
      destinationsUpdateDestinationDestinationsDestinationIdPut(
        this,
        request,
        options,
      ),
    );
  }
}
