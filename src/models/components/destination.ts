/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents a holiday destination.
 */
export type Destination = {
  /**
   * The country where the destination is located.
   */
  country: string;
  /**
   * A brief description of the destination.
   */
  description: string;
  /**
   * The name of the holiday destination.
   */
  name: string;
  /**
   * Rating of the destination (0 to 5).
   */
  rating: number;
};

/** @internal */
export const Destination$inboundSchema: z.ZodType<
  Destination,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string(),
  description: z.string(),
  name: z.string(),
  rating: z.number(),
});

/** @internal */
export type Destination$Outbound = {
  country: string;
  description: string;
  name: string;
  rating: number;
};

/** @internal */
export const Destination$outboundSchema: z.ZodType<
  Destination$Outbound,
  z.ZodTypeDef,
  Destination
> = z.object({
  country: z.string(),
  description: z.string(),
  name: z.string(),
  rating: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Destination$ {
  /** @deprecated use `Destination$inboundSchema` instead. */
  export const inboundSchema = Destination$inboundSchema;
  /** @deprecated use `Destination$outboundSchema` instead. */
  export const outboundSchema = Destination$outboundSchema;
  /** @deprecated use `Destination$Outbound` instead. */
  export type Outbound = Destination$Outbound;
}

export function destinationToJSON(destination: Destination): string {
  return JSON.stringify(Destination$outboundSchema.parse(destination));
}

export function destinationFromJSON(
  jsonString: string,
): SafeParseResult<Destination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Destination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Destination' from JSON`,
  );
}
