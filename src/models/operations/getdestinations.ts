/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDestinationsRequest = {
  /**
   * Filter destinations by minimum rating (0 to 5).
   */
  minRating?: number | undefined;
};

/** @internal */
export const GetDestinationsRequest$inboundSchema: z.ZodType<
  GetDestinationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  min_rating: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "min_rating": "minRating",
  });
});

/** @internal */
export type GetDestinationsRequest$Outbound = {
  min_rating: number;
};

/** @internal */
export const GetDestinationsRequest$outboundSchema: z.ZodType<
  GetDestinationsRequest$Outbound,
  z.ZodTypeDef,
  GetDestinationsRequest
> = z.object({
  minRating: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    minRating: "min_rating",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDestinationsRequest$ {
  /** @deprecated use `GetDestinationsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDestinationsRequest$inboundSchema;
  /** @deprecated use `GetDestinationsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDestinationsRequest$outboundSchema;
  /** @deprecated use `GetDestinationsRequest$Outbound` instead. */
  export type Outbound = GetDestinationsRequest$Outbound;
}

export function getDestinationsRequestToJSON(
  getDestinationsRequest: GetDestinationsRequest,
): string {
  return JSON.stringify(
    GetDestinationsRequest$outboundSchema.parse(getDestinationsRequest),
  );
}

export function getDestinationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDestinationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDestinationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDestinationsRequest' from JSON`,
  );
}
